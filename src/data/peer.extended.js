const FileSystemPromises = require('fs').promises

const BaseN = require('../fn.base.n')
const TryAsync = require('../fn.try.catch.async')

const __ = require('../const')
const Peer = require('./peer')

/** Peer Object, with some of extended capabilities for peer application*/
const PeerExtended = class extends Peer{
    /** @type {function} Some of function to be put for special purposes */
    callback

    /** @type {boolean} Is this peer connected to us */
    isSender = false

    /** @type {boolean} Keep alive client polling timer? */
    keepAlive = false

    /** @type {number} Peer quality indicator*/
    quality = __.MAX_TRIAL

    /** @type {FileSystemPromises.FileHandle} Current file open, generated by FileSystem.open(), -1 means not active*/
    mediaStream = -1

    /** @type {Buffer} Hash of current media stream*/
    mediaStreamHash = undefined

    /** @type {string} Location of media stream*/
    mediaStreamLocation = ''

    /** @type {string} Amount of bytes received */
    mediaStreamPacketsReceived = 0

    /** @type {string} Number of total packets that will be received*/
    mediaStreamPacketsTotal = 0

    /** @type {number} Previous byte position */
    mediaStreamPreviousPacket = 0

    /** @type {Object[]} List of media streams in queue*/
    mediaStreamQueue = []

    /** @type {function} Peer callback to be used when sending large bytes*/
    mediaStreamCb

    /**
     * Close media stream
     */
    async closeMediaStream () {
        return await TryAsync(async () => {
            this.mediaStreamLocation = ''
            this.mediaStreamHash = undefined
            this.mediaStreamPacketsTotal = 0
            this.mediaStreamPacketsReceived = 0

            if (typeof this.mediaStream !== 'undefined') {
                await this.mediaStream.close()
                this.mediaStream = undefined
            }
        })
    }

    /**
     * Get current hash value for media stream
     * @returns {string}
     */
    getMediaStreamHash () {
        return BaseN.encode(this.mediaStreamHash, '92')
    }

    /**
     * Get temporary media stream file location
     * @returns {string}
     */
    getMediaStreamTempLocation () {
        return `./data/temp.${this.ip}_${this.port}`        
    }

    /**
     * Open media stream
     * @param {string} location Location to start media stream
     * @param {string} hash Hash to be used for verifying
     * @param {number} packetsNumber Number of packets
     */
    async openMediaStream (location, hash, packetsNumber) {
        return await TryAsync(async () => {
            this.mediaStream = await FileSystemPromises.open(this.getMediaStreamTempLocation(), 'w')
            this.mediaStreamHash = BaseN.decode(hash, '92')
            this.mediaStreamLocation = `./data/${location}`
            this.mediaStreamPacketsTotal = packetsNumber
        })
    }
}

module.exports = PeerExtended